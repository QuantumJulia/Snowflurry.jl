name: CI
on:
  - push
  - pull_request
jobs:
  os-test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
      # don't run on draft PRs
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        os: [windows-latest, macOS-latest]
        arch: ["x64"]
    steps:
      - uses: actions/checkout@v2
      - name: "Setup Julia"
        uses: julia-actions/setup-julia@v1
        with:
          version: 1.8.5
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-

      - name: Install JuliaFormatter and format Snowflurry
        run: |
          julia  -e 'import Pkg; Pkg.add("JuliaFormatter")'
          julia  -e 'using JuliaFormatter; format(".")'
          git diff --exit-code

      - name: Build Snowflurry
        run: >
          julia --project=. -e 
          'using Pkg;
          Pkg.precompile();
          Pkg.instantiate()'

      - name: Test Snowflurry
        uses: julia-actions/julia-runtest@v1

  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ubuntu-latest
     # don't run on draft PRs
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        version: ['1.6.7', '1.7', '1.8', '1.9']
        arch: ["x64"]
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      
      - name: Build Snowflurry
        run: >
          julia --project=. -e 
          'using Pkg;
          Pkg.instantiate()'
      
      - name: Test Snowflurry
        uses: julia-actions/julia-runtest@v1

      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: src
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info
